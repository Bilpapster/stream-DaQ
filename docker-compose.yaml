version: '3.8'

networks:
  data-quality-network:
    driver: bridge

services:
  zookeeper:
    container_name: zookeeper
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - data-quality-network

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      # Dynamic topic creation from config
      KAFKA_CREATE_TOPICS: "${INPUT_TOPIC}:1:1,${OUTPUT_TOPIC}:1:1"
    networks:
      - data-quality-network
    volumes:
      - ./experiments-configurations.yaml:/config/experiments.yaml
#    command:
#      - kafka-topics --bootstrap-server localhost:9092 --create --topic $INPUT_TOPIC --config retention.ms=600000

  python-producer:
    build:
      context: .
      dockerfile: dockerfiles/kafka-producer.Dockerfile
    depends_on:
      - kafka
    networks:
      - data-quality-network
    environment:
      - INPUT_TOPIC=${INPUT_TOPIC}
      - OUTPUT_TOPIC=${OUTPUT_TOPIC}

  deequ:
    build:
      context: ./deequExperiments
      dockerfile: Dockerfile
    depends_on:
      - kafka
    networks:
      - data-quality-network
    environment:
      - INPUT_TOPIC=${INPUT_TOPIC}
      - OUTPUT_TOPIC=${OUTPUT_TOPIC}

  stream-daq:
    build:
      context: ./pathway
      dockerfile: Dockerfile
    depends_on:
      - kafka
    networks:
      - data-quality-network
    environment:
      - INPUT_TOPIC=${INPUT_TOPIC}
      - OUTPUT_TOPIC=${OUTPUT_TOPIC}